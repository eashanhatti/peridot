/* A dependent struct type. The type of `f` is dependent on the value of `T` */
def Ty
  : Type
  = Struct {
      T: Type,
      f: Fun(T) -> T
    }

/* Constructing dependent structs */
def foo
  : Ty
  = struct {
      T = Bool,
      f = fun(b) => b
    }

/* Patched structs. We can 'patch' the struct type `Ty` to make the `T` field a singleton type. Structs of type `patch(Ty){ T = Bool }` can only have a value of `Bool` in the `T` field, anything else is a type error */
def bar
  : patch Ty { T = Bool }
  = struct {
      T = Bool,
      f = fun(b) => b
    }

/* Subtyping between patched and non-patched structs. Definition of non-patched needs to be available */
def baz
  : patch Ty { T = Bool }
  = foo

/* Subtyping between non-patched and patched structs. No definitions need to be available */
def qux
  : Ty
  = bar
