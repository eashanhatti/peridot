axiom List: Function(MetaType) ~> MetaType
axiom nil: Function(inferred A: MetaType) ~> List(A)
axiom cons: Function(inferred A: MetaType, A, List(A)) ~> List(A)

axiom Append: Function(inferred A: MetaType, List(A), List(A), List(A)) ~> MetaType
axiom append_nil:
  Forall(A: MetaType), Forall(xs: List(A)),
  Append(nil, xs, xs)
axiom append_cons:
  Forall(A: MetaType), Forall(x: A, ys: List(A), zs: List(A), ws: List(A)),
  Implies(
    Append(ys, zs, ws),
    Append(cons(x, ys), zs, cons(x, ws)))

axiom Unit: MetaType
axiom unit: Unit

variable xs: List(Unit)
proof Append(nil, nil, xs)
variable ys: List(Unit)
proof Append(cons(unit, nil), cons(unit, nil), ys)
proof Append(cons(unit, nil), cons(unit, nil), cons(unit, cons(unit, nil)))