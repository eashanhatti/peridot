define Nat
  : Type
  = Record {
      tag: Bool,
      data:
        if tag {
          Record {}
        } else {
          Nat
        }
    };

define zero
  : Nat
  = record {
      tag = true,
      data = record {}
    };

define succ
  : Function(Nat) -> Nat
  = function(n) =>
      record {
        tag = false,
        data = n
      };

axiom CompileNat: Function(CCode(C_Int), Code(Nat)) ~> MetaType;
axiom compile_zero : CompileNat(c<[c_int 0]>, <zero>);
axiom compile_succ:
  Forall x, Forall n,
  Implies(
    CompileNat(x, n),
    CompileNat(c<[c_add c~x [c_int 1]]>, <succ(~n)>));

variable n: Code(Nat);
proof CompileNat(c<[c_add [c_add [c_int 0] [c_int 1]] [c_int 1]]>, <succ(~n)>);
