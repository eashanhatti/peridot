let {
	assume Nat : MType;

	assume zero : Nat;
	assume succ : [_ : Nat] -> Nat;

	assume CompileNat : [_ : Nat] -> [_ : (LiftL Int)] -> MType;
	assume compile_zero : <CompileNat zero (quoteL 0)>;
	assume compile_succ :
		all n, all x,
		(impl
			<CompileNat n x>
			<CompileNat <succ n> (quoteL (+ (spliceL x) 1))>);

	fresh x : (LiftL Int);
	prove <CompileNat <succ zero> x>;
} in {
	OType
}
