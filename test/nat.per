/*
The `Nat` datatype, showcasing dependent records. The type of the `data` field is dependent on the value of the `tag` field. If `tag = true`, `data : Record()` (`Record()` is essentially the unit type), and if `tag = false`, `data : Nat`
*/
define Nat
  : Type
  = Record {
      tag : Bool,
      data :
        if tag {
          Record()
        } else {
          Nat
        }
    };

/* Constructing dependent records */
define zero
  : Nat
  = record {
      tag = true,
      data = record()
    };

/* Constructing dependent records */
define succ
  : Function(Nat) -> Nat
  = function(n) =>
      record {
        tag = false,
        data = n
      };

/* The `add` function, showcasing dependently typed `if`. The typechecker knows that in the first branch `n.data : Record()` (because `maybe.tag = true`). In the second branch, the typechecker knows that `n.data : A` (because maybe.tag = false) */
define add
  : Function(Nat, Nat) -> Nat
  = function(n, m) =>
      if n.tag {
        m
      } else {
        add(n.data, m)
      };
