let {
  'val Maybe
    : '[_ : OType] -> OType
    = '\A {
        signature {
          t : Bool,
          d :
            bool_elim t {
              A;
              signature {};
            }
        }
      };

  'val just : '[A : OType] -> '[_ : A] -> <Maybe A>
    = '\_ x {
        structure {
          t = tt,
          d = x
        }
      };

  'val nothing : '[A : OType] -> <Maybe A>
    = '\_ {
        structure {
          t = ff,
          d = structure {}
        }
      };

  'val map
    : '[A : OType] -> '[_ : '[_ : A] -> A] -> '[_ : <Maybe A>] -> <Maybe A>
    = '\A f m {
        bool_elim (#t m)
        {
          <just A <f (#d m)>>;
          <nothing A>;
        }
      };
} in {
  OType
}
