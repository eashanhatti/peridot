import nat.per

def Vect
  : Fun(Nat, Type) -> Type
  = fun(n, A) =>
      Struct {
        tag: Bool,
        data:
          if tag {
            Struct {
              index: Equal(n, zero)
            }
          } else {
            Struct {
              m: Nat,
              item: A,
              index: Equal(n, succ(m)),
              next: Vect(m, A)
            }
          }
      }

def nil
  : Fun(inf A: Type) -> Vect(zero, A)
  = fun() =>
      struct {
        tag = true,
        data = struct { index = refl }
      }

def cons
  : Fun(
      inf A: Type,
      inf n: Nat,
      item: A,
      vect: Vect(n, A))
      -> Vect(succ(n), A)
  = fun(inf A, inf n, item, vect) =>
      struct {
        tag = false,
        data =
          struct {
            m = n,
            item = item,
            index = refl,
            next = vect
          }
      }
