import c_compiler.per
import list.per
import pair.per
import sigma.per

axiom State: MetaType
axiom state: MetaFun(Text, List(CDecl)) -> State

metadef init_state: State = state("a", nil)

prop CompilePTerm
	( Code(`A)
	, List(Pair(Sigma(Code(Type), metafun(t) => Code(t)), Text))
	, CTerm
	, State)
axiom compile_var_p:
	CompilePTerm(`x, `ctx, var(`t), `d)
	:- Lookup(`ctx, `x, `t)
axiom compile_exfun_p:
	CompilePTerm(mfun(`f), `ctx, add(one, `btm), `st)
	:- forall(x: Code(?)) -> CompilePTerm(~(`f(x)), cons(pair(sigma(?, x), "x")), `btm, `st)
