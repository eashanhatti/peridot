import list.per
import pair.per
import sigma.per

metadef Context: MetaType =
  List(Sigma(Code(Type), metafun(ty) => Code(~ty)))

prop LookupVar
  ( inf A: Code(Type)
  , Context
  , Code(~A))
axiom lookupvar_find: LookupVar(cons(sigma(`a, `x), `b), `x)
axiom lookupvar_pass:
  LookupVar(cons(`_, `ctx), `x)
  :- LookupVar(`ctx, `x)

prop NotFree(inf A: Code(Type), Code(~A))

prop FreeVars
	( inf A: Code(Type)
	, Code(~A)
	, Context
	, Context)
axiom fv_bound:
	FreeVars(`x, `_, nil)
	:- NotFree(`x)
axiom fv_free:
	FreeVars(`x, `ctx, cons(sigma(?, `x), nil))
	:- LookupVar(`x, `ctx)
axiom fv_fun:
	FreeVars(<fun(x) => ~(`f(<x>))>, `ctx, `fv)
	:- forall(x: ?) -> Implies(NotFree(x), FreeVars(`f(x), `ctx, `fv))
