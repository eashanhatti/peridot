import list.per
import pair.per
import sigma.per

metadef Context: MetaType =
  List(Sigma(Code(Type), metafun(ty) => Code(~ty)))

prop LookupVar
  ( inf A: Code(Type)
  , Context
  , Code(~A))
axiom lookupvar_find: LookupVar(cons(sigma(`_, `x), `_), `x)
axiom lookupvar_pass:
  LookupVar(cons(`_, `ctx), `x)
  :- LookupVar(`ctx, `x)

prop FreeVars
  ( inf A: Code(Type)
  , Context
  , Code(~A)
  , Context)
axiom free_vars_var:
  FreeVars(`ctx, `tm, cons(sigma(`_, `tm), `ctx))
  :- LookupVar(`ctx, `tm)
axiom free_vars_fun:
  FreeVars(`ctx, <fun(x) => ~(`f(<x>))>, `fv)
  :- forall(x: Code(?)) -> FreeVars(`ctx, `f(x), `fv)
