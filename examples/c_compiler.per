import list.per
import pair.per

axiom CType: MetaType
axiom Int: CType

axiom CTerm: MetaType
axiom zero: CTerm
axiom one: CTerm
axiom add: MetaFun(CTerm, CTerm) -> CTerm
axiom var: MetaFun(Text) -> CTerm

axiom CStmt: MetaType
axiom return: MetaFun(CTerm) -> CStmt

axiom CDecl: MetaType
axiom func: MetaFun(CType, Text, List(Pair(CType, Text)), CStmt) -> CDecl

prop CompileCTerm(CTerm, Text)
axiom compile_add:
  CompileCTerm(add(`e1, `e2), "(" ++ `t1 ++ " + " ++ `t2 ++ ")")
  :- CompileCTerm(`e1, `t1)
  ,  CompileCTerm(`e2, `t2)
axiom compile_zero: CompileCTerm(zero, "0")
axiom compile_one: CompileCTerm(one, "1")
axiom compile_var: CompileCTerm(var(`t), `t)

prop CompileDecl(CDecl, Text)
axiom compile_func:
  CompileDecl(
    func(`outTy, `f, `ps, `body),
    `cOutTy ++ " " ++ `f ++ "(" ++ `tps ++ ") { " ++ `cBody ++ " }")
  :- CompileCType(`inTy, `cInTy)
  ,  CompileCType(`outTy, cOutTy)
  ,  CompileStmt(`body, `cBody)
  ,  CompileParams(`ps, `tps)

prop CompileParams(List(Pair(CType, Text)), Text)
axiom compile_params:
  CompileParams(`ps, `t)
  :- Map(CompileParam, `ps, `tps)
  ,  Intersperse(", ", `tps, `tps2)
  ,  ConcatTexts(`tps2, `t)

prop CompileParam(Pair(CType, Text), Text)
axiom compile_param:
  CompileParam(pair(`ty, `n), `tty ++ " " ++ `n)
  :- CompileCType(`ty, `tty)

prop CompileCType(CType, Text)
axiom compile_int: CompileCType(Int, "int")

prop CompileStmt(CStmt, Text)
axiom compile_return:
  CompileStmt(return(`x), "return " ++ `t ++ ";")
  :- CompileCTerm(`x, `t)

prop CompileDecls(List(CDecl), Text)
axiom compile_decls_nil: CompileDecls(nil, "")
axiom compile_decls_cons:
  CompileDecls(cons(`d, `ds), `dt ++ "\n" ++ `dst)
  :- CompileDecl(`d, `dt)
  ,  CompileDecls(`ds, `dst)
