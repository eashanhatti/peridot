import base_preds.per
import int.per
import nat.per

pred Optimize(Code(~Int), Code(~Int))
axiom
  Optimize(`lit, `lit)
  :- IsLiteral(`lit)
axiom
  Optimize(<~div(~mul(~`x, ~`y), ~`y)>, `z)
  :- Optimize(`x, `z)
axiom
  Optimize(<~mul(~`x, ~two)>, <~shl(~`y, ~one)>)
  :- Optimize(`x, `y)
axiom
  Optimize(<~`op(~`x, ~`y)>, <~`op(~`z, ~`w)>)
  :- Optimize(`x, `z)
  ,  Optimize(`y, `w)
  ,  IsBinOp(`op)

pred IsLiteral(Code(~Int))
axiom IsLiteral(zero)
axiom IsLiteral(one)
axiom IsLiteral(two)
axiom IsLiteral(three)

pred IsBinOp(Code(Fun(~Int, ~Int) -> ~Int))
axiom IsBinOp(mul)
axiom IsBinOp(div)
axiom IsBinOp(shl)
axiom IsBinOp(add)

pred Cost(Code(~Int), Nat)
axiom Cost(`lit, nzero) :- IsLiteral(`lit)
axiom Cost(<~shl(~`x, ~`y)>, nsucc(`j))
  :- Cost(`x, `n)
  ,  Cost(`y, `m)
  ,  NAdd(`n, `m, `j)
axiom Cost(<~mul(~`x, ~`y)>, nsucc(nsucc(`j)))
  :- Cost(`x, `n)
  ,  Cost(`y, `m)
  ,  NAdd(`n, `m, `j)
axiom Cost(<~div(~`x, ~`y)>, nsucc(nsucc(`j)))
  :- Cost(`x, `n)
  ,  Cost(`y, `m)
  ,  NAdd(`n, `m, `j)
axiom Cost(<~add(~`x, ~`y)>, nsucc(nsucc(`j)))
  :- Cost(`x, `n)
  ,  Cost(`y, `m)
  ,  NAdd(`n, `m, `j)

pred CostLess(Code(~Int), Code(~Int))
axiom CostLess(`x, `y)
  :- Cost(`x, `c1)
  ,  Cost(`y, `c2)
  ,  Less(`c2, `c1)

metadef tm1 = <~div(~mul(~three, ~two), ~two)>
metadef tm2 = <~mul(~three, ~two)>

metavar x/*
query
  with Optimize(tm1, x)
  for x as i {
    for x as j {
      CostLess(i, j)
    }
  }*//*
query Optimize(tm1, x)
*/
query Cost(tm1, x)
